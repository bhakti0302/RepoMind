{
  "path": "samples/SimpleClass.java",
  "language": "java",
  "ast": "<tree_sitter.Tree object at 0x101581a90>",
  "content": "package com.example.test;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.io.IOException;\n\n/**\n * A simple Java class for testing the Tree-sitter parser\n */\npublic class SimpleClass extends BaseClass implements TestInterface {\n    // Fields\n    private String name;\n    private int count;\n    protected List<String> items;\n    public static final String VERSION = \"1.0.0\";\n    \n    /**\n     * Default constructor\n     */\n    public SimpleClass() {\n        this.name = \"Default\";\n        this.count = 0;\n        this.items = new ArrayList<>();\n    }\n    \n    /**\n     * Constructor with parameters\n     */\n    public SimpleClass(String name, int count) {\n        this.name = name;\n        this.count = count;\n        this.items = new ArrayList<>();\n    }\n    \n    /**\n     * Get the name\n     */\n    public String getName() {\n        return name;\n    }\n    \n    /**\n     * Set the name\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    /**\n     * Get the count\n     */\n    public int getCount() {\n        return count;\n    }\n    \n    /**\n     * Set the count\n     */\n    public void setCount(int count) {\n        this.count = count;\n    }\n    \n    /**\n     * Add an item to the list\n     */\n    public void addItem(String item) {\n        items.add(item);\n    }\n    \n    /**\n     * Get all items\n     */\n    public List<String> getItems() {\n        return items;\n    }\n    \n    /**\n     * Process items with exception handling\n     */\n    public void processItems() throws IOException {\n        for (String item : items) {\n            if (item == null) {\n                throw new IOException(\"Null item found\");\n            }\n            System.out.println(\"Processing: \" + item);\n        }\n    }\n    \n    /**\n     * Static utility method\n     */\n    public static int calculateSum(int a, int b) {\n        return a + b;\n    }\n    \n    /**\n     * Main method for testing\n     */\n    public static void main(String[] args) {\n        SimpleClass obj = new SimpleClass(\"Test\", 5);\n        obj.addItem(\"Item 1\");\n        obj.addItem(\"Item 2\");\n        \n        System.out.println(\"Name: \" + obj.getName());\n        System.out.println(\"Count: \" + obj.getCount());\n        System.out.println(\"Items: \" + obj.getItems());\n        \n        try {\n            obj.processItems();\n        } catch (IOException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n        \n        System.out.println(\"Sum: \" + calculateSum(10, 20));\n    }\n}\n\n/**\n * Base class for testing inheritance\n */\nclass BaseClass {\n    protected String baseField;\n    \n    public BaseClass() {\n        this.baseField = \"Base\";\n    }\n    \n    public String getBaseField() {\n        return baseField;\n    }\n}\n\n/**\n * Interface for testing implementation\n */\ninterface TestInterface {\n    void processItems() throws IOException;\n}\n",
  "package": "com.example.test",
  "imports": [
    "java.util.List",
    "java.util.ArrayList",
    "java.io.IOException"
  ],
  "classes": [
    {
      "name": "SimpleClass",
      "superclass": "BaseClass",
      "interfaces": [
        "TestInterface"
      ],
      "fields": [
        {
          "name": "name",
          "type": "String",
          "start_line": 11,
          "end_line": 11,
          "code": "private String name;"
        },
        {
          "name": "count",
          "type": "unknown",
          "start_line": 12,
          "end_line": 12,
          "code": "private int count;"
        },
        {
          "name": "items",
          "type": "List",
          "start_line": 13,
          "end_line": 13,
          "code": "protected List<String> items;"
        },
        {
          "name": "VERSION",
          "type": "String",
          "start_line": 14,
          "end_line": 14,
          "code": "public static final String VERSION = \"1.0.0\";"
        }
      ],
      "methods": [
        {
          "name": "getName",
          "return_type": "String",
          "parameters": [],
          "start_line": 37,
          "end_line": 39,
          "code": "public String getName() {\n        return name;\n    }"
        },
        {
          "name": "setName",
          "return_type": "String",
          "parameters": [
            {
              "name": "name",
              "type": "String"
            }
          ],
          "start_line": 44,
          "end_line": 46,
          "code": "public void setName(String name) {\n        this.name = name;\n    }"
        },
        {
          "name": "getCount",
          "return_type": "void",
          "parameters": [],
          "start_line": 51,
          "end_line": 53,
          "code": "public int getCount() {\n        return count;\n    }"
        },
        {
          "name": "setCount",
          "return_type": "void",
          "parameters": [],
          "start_line": 58,
          "end_line": 60,
          "code": "public void setCount(int count) {\n        this.count = count;\n    }"
        },
        {
          "name": "addItem",
          "return_type": "String",
          "parameters": [
            {
              "name": "item",
              "type": "String"
            }
          ],
          "start_line": 65,
          "end_line": 67,
          "code": "public void addItem(String item) {\n        items.add(item);\n    }"
        },
        {
          "name": "getItems",
          "return_type": "List",
          "parameters": [],
          "start_line": 72,
          "end_line": 74,
          "code": "public List<String> getItems() {\n        return items;\n    }"
        },
        {
          "name": "processItems",
          "return_type": "IOException",
          "parameters": [],
          "start_line": 79,
          "end_line": 86,
          "code": "public void processItems() throws IOException {\n        for (String item : items) {\n            if (item == null) {\n                throw new IOException(\"Null item found\");\n            }\n            System.out.println(\"Processing: \" + item);\n        }\n    }"
        },
        {
          "name": "calculateSum",
          "return_type": "void",
          "parameters": [],
          "start_line": 91,
          "end_line": 93,
          "code": "public static int calculateSum(int a, int b) {\n        return a + b;\n    }"
        },
        {
          "name": "main",
          "return_type": "String",
          "parameters": [
            {
              "name": "args",
              "type": "String"
            }
          ],
          "start_line": 98,
          "end_line": 114,
          "code": "public static void main(String[] args) {\n        SimpleClass obj = new SimpleClass(\"Test\", 5);\n        obj.addItem(\"Item 1\");\n        obj.addItem(\"Item 2\");\n        \n        System.out.println(\"Name: \" + obj.getName());\n        System.out.println(\"Count: \" + obj.getCount());\n        System.out.println(\"Items: \" + obj.getItems());\n        \n        try {\n            obj.processItems();\n        } catch (IOException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n        \n        System.out.println(\"Sum: \" + calculateSum(10, 20));\n    }"
        }
      ],
      "start_line": 9,
      "end_line": 115,
      "code": "public class SimpleClass extends BaseClass implements TestInterface {\n    // Fields\n    private String name;\n    private int count;\n    protected List<String> items;\n    public static final String VERSION = \"1.0.0\";\n    \n    /**\n     * Default constructor\n     */\n    public SimpleClass() {\n        this.name = \"Default\";\n        this.count = 0;\n        this.items = new ArrayList<>();\n    }\n    \n    /**\n     * Constructor with parameters\n     */\n    public SimpleClass(String name, int count) {\n        this.name = name;\n        this.count = count;\n        this.items = new ArrayList<>();\n    }\n    \n    /**\n     * Get the name\n     */\n    public String getName() {\n        return name;\n    }\n    \n    /**\n     * Set the name\n     */\n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    /**\n     * Get the count\n     */\n    public int getCount() {\n        return count;\n    }\n    \n    /**\n     * Set the count\n     */\n    public void setCount(int count) {\n        this.count = count;\n    }\n    \n    /**\n     * Add an item to the list\n     */\n    public void addItem(String item) {\n        items.add(item);\n    }\n    \n    /**\n     * Get all items\n     */\n    public List<String> getItems() {\n        return items;\n    }\n    \n    /**\n     * Process items with exception handling\n     */\n    public void processItems() throws IOException {\n        for (String item : items) {\n            if (item == null) {\n                throw new IOException(\"Null item found\");\n            }\n            System.out.println(\"Processing: \" + item);\n        }\n    }\n    \n    /**\n     * Static utility method\n     */\n    public static int calculateSum(int a, int b) {\n        return a + b;\n    }\n    \n    /**\n     * Main method for testing\n     */\n    public static void main(String[] args) {\n        SimpleClass obj = new SimpleClass(\"Test\", 5);\n        obj.addItem(\"Item 1\");\n        obj.addItem(\"Item 2\");\n        \n        System.out.println(\"Name: \" + obj.getName());\n        System.out.println(\"Count: \" + obj.getCount());\n        System.out.println(\"Items: \" + obj.getItems());\n        \n        try {\n            obj.processItems();\n        } catch (IOException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n        \n        System.out.println(\"Sum: \" + calculateSum(10, 20));\n    }\n}"
    },
    {
      "name": "BaseClass",
      "superclass": null,
      "interfaces": [],
      "fields": [
        {
          "name": "baseField",
          "type": "String",
          "start_line": 121,
          "end_line": 121,
          "code": "protected String baseField;"
        }
      ],
      "methods": [
        {
          "name": "getBaseField",
          "return_type": "String",
          "parameters": [],
          "start_line": 127,
          "end_line": 129,
          "code": "public String getBaseField() {\n        return baseField;\n    }"
        }
      ],
      "start_line": 120,
      "end_line": 130,
      "code": "class BaseClass {\n    protected String baseField;\n    \n    public BaseClass() {\n        this.baseField = \"Base\";\n    }\n    \n    public String getBaseField() {\n        return baseField;\n    }\n}"
    }
  ],
  "methods": [
    {
      "name": "getName",
      "return_type": "String",
      "parameters": [],
      "start_line": 37,
      "end_line": 39,
      "code": "public String getName() {\n        return name;\n    }"
    },
    {
      "name": "setName",
      "return_type": "String",
      "parameters": [
        {
          "name": "name",
          "type": "String"
        }
      ],
      "start_line": 44,
      "end_line": 46,
      "code": "public void setName(String name) {\n        this.name = name;\n    }"
    },
    {
      "name": "getCount",
      "return_type": "void",
      "parameters": [],
      "start_line": 51,
      "end_line": 53,
      "code": "public int getCount() {\n        return count;\n    }"
    },
    {
      "name": "setCount",
      "return_type": "void",
      "parameters": [],
      "start_line": 58,
      "end_line": 60,
      "code": "public void setCount(int count) {\n        this.count = count;\n    }"
    },
    {
      "name": "addItem",
      "return_type": "String",
      "parameters": [
        {
          "name": "item",
          "type": "String"
        }
      ],
      "start_line": 65,
      "end_line": 67,
      "code": "public void addItem(String item) {\n        items.add(item);\n    }"
    },
    {
      "name": "getItems",
      "return_type": "List",
      "parameters": [],
      "start_line": 72,
      "end_line": 74,
      "code": "public List<String> getItems() {\n        return items;\n    }"
    },
    {
      "name": "processItems",
      "return_type": "IOException",
      "parameters": [],
      "start_line": 79,
      "end_line": 86,
      "code": "public void processItems() throws IOException {\n        for (String item : items) {\n            if (item == null) {\n                throw new IOException(\"Null item found\");\n            }\n            System.out.println(\"Processing: \" + item);\n        }\n    }"
    },
    {
      "name": "calculateSum",
      "return_type": "void",
      "parameters": [],
      "start_line": 91,
      "end_line": 93,
      "code": "public static int calculateSum(int a, int b) {\n        return a + b;\n    }"
    },
    {
      "name": "main",
      "return_type": "String",
      "parameters": [
        {
          "name": "args",
          "type": "String"
        }
      ],
      "start_line": 98,
      "end_line": 114,
      "code": "public static void main(String[] args) {\n        SimpleClass obj = new SimpleClass(\"Test\", 5);\n        obj.addItem(\"Item 1\");\n        obj.addItem(\"Item 2\");\n        \n        System.out.println(\"Name: \" + obj.getName());\n        System.out.println(\"Count: \" + obj.getCount());\n        System.out.println(\"Items: \" + obj.getItems());\n        \n        try {\n            obj.processItems();\n        } catch (IOException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n        \n        System.out.println(\"Sum: \" + calculateSum(10, 20));\n    }"
    },
    {
      "name": "getBaseField",
      "return_type": "String",
      "parameters": [],
      "start_line": 127,
      "end_line": 129,
      "code": "public String getBaseField() {\n        return baseField;\n    }"
    },
    {
      "name": "processItems",
      "return_type": "IOException",
      "parameters": [],
      "start_line": 136,
      "end_line": 136,
      "code": "void processItems() throws IOException;"
    }
  ]
}