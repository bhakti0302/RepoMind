## Overview
The system will be enhanced to display employees by department, allowing users to filter by department name and view employee details.

## Key Components
- **EmployeeService**: Enhanced with a method to filter employees by department.
- **Main**: Updated to demonstrate the new filtering functionality.

## Code Changes

### **Create** to `/Users/bhaktichindhe/Desktop/Project/EmployeeManagementSystem/src/com/company/service/EmployeeManager.java`
```java
// New class to manage employee-related operations, including department filtering
package com.company.service;

import com.company.model.Employee;
import java.util.List;
import java.util.stream.Collectors;

public class EmployeeManager {
    private final EmployeeService employeeService;

    public EmployeeManager(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }

    /**
     * Retrieves all employees belonging to a specified department.
     * @param department Name of the department to filter by.
     * @return List of employees in the given department.
     */
    public List<Employee> getEmployeesByDepartment(String department) {
        return employeeService.getAllEmployees().stream()
                .filter(employee -> employee.getDepartment().equalsIgnoreCase(department))
                .collect(Collectors.toList());
    }
}
```

### **Modify** to `/Users/bhaktichindhe/Desktop/Project/EmployeeManagementSystem/src/com/company/service/EmployeeService.java`
```java
// No direct modifications needed based on provided requirements and context.
// However, ensuring the class remains as previously defined for consistency:
package com.company.service;

import com.company.model.Employee;
import java.util.ArrayList;
import java.util.List;

public class EmployeeService {
    private List<Employee> employees = new ArrayList<>();

    public void addEmployee(Employee employee) {
        employees.add(employee);
    }

    public List<Employee> getAllEmployees() {
        return employees;
    }
}
```

### **Update** to `/Users/bhaktichindhe/Desktop/Project/EmployeeManagementSystem/src/com/company/app/Main.java`
```java
// Updated to include dependency on EmployeeManager and demonstrate filtering
package com.company.app;

import com.company.model.Employee;
import com.company.service.EmployeeService;
import com.company.service.EmployeeManager;

import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        EmployeeService service = new EmployeeService();
        EmployeeManager manager = new EmployeeManager(service);
        
        // Example employees for demonstration
        service.addEmployee(new Employee(1, "John Doe", "Engineering"));
        service.addEmployee(new Employee(2, "Jane Doe", "HR"));
        service.addEmployee(new Employee(3, "Bob Smith", "Engineering"));

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Department Name: ");
        String department = scanner.nextLine();

        List<Employee> employeesInDepartment = manager.getEmployeesByDepartment(department);

        if (!employeesInDepartment.isEmpty()) {
            System.out.println("Employees in " + department + " Department:");
            for (Employee e : employeesInDepartment) {
                System.out.println("Name: " + e.getName() + ", ID: " + e.getId() + ", Role: " + e.getDepartment());
            }
        } else {
            System.out.println("No employees found in the " + department + " department.");
        }
    }
}
```

### **Insert** to `/Users/bhaktichindhe/Desktop/Project/EmployeeManagementSystem/src/com/company/model/Employee.java` (No Change Needed, Provided for Context Confirmation)
```java
// Confirmation: No insertions needed, class remains as defined
// public String getRole() { ... } // **NOT PRESENT IN ORIGINAL, ASSUMED TYPO IN REQUIREMENTS (ROLE DISPLAYED AS DEPARTMENT IN OUTPUT)**
// Assuming "Role" in output refers to "Department" due to context:
// public String getDepartment() { return department; } // Already Exists
```