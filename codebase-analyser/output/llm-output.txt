Given the strict format requirement and the explicit instructions to **not** provide an implementation plan, testing approach, or fill in all sections unless necessary, I will adhere to the specified format focusing only on **Code Changes** as requested, along with a brief **Overview** and **Key Components** for contextual clarity.

### Overview :
Implementing the "Display Employees by Department" feature involves enhancing the `EmployeeService` class to filter employees by department and updating the `Main` class to demonstrate this functionality.

### Key Components :
- **EmployeeService.java**: To house the new filtering method.
- **Main.java**: To utilize the new method for department-based employee listing.
- **Employee.java**: Already has the necessary structure (department attribute).

### Code Changes :

#### **Add to** `/Users/bhaktichindhe/Desktop/Project/EmployeeManagementSystem/src/com/company/service/EmployeeService.java`
```java
/**
 * Retrieves a list of employees belonging to a specified department.
 * @param department Name of the department to filter by.
 * @return List of Employee objects in the given department.
 */
public List<Employee> getEmployeesByDepartment(String department) {
    return employees.stream()
            .filter(employee -> employee.getDepartment().equalsIgnoreCase(department))
            .toList();
}
```

#### **Modify to** `/Users/bhaktichindhe/Desktop/Project/EmployeeManagementSystem/src/com/company/model/Employee.java`
```java
// Assuming getter for department is not present, add it
public String getDepartment() {
    return department;
}
```

#### **Update to** `/Users/bhaktichindhe/Desktop/Project/EmployeeManagementSystem/src/com/company/app/Main.java`
```java
public static void main(String[] args) {
    EmployeeService service = new EmployeeService();
    service.addEmployee(new Employee(1, "Alice", "HR"));
    service.addEmployee(new Employee(2, "Bob", "IT"));
    service.addEmployee(new Employee(3, "Charlie", "HR")); // Additional for demo

    String targetDepartment = "HR"; // Department to filter by
    List<Employee> departmentEmployees = service.getEmployeesByDepartment(targetDepartment);

    System.out.println("Employees in " + targetDepartment + " Department:");
    departmentEmployees.forEach(employee -> System.out.println("Name: " + employee.getName() + ", ID: " + employee.getId() + ", Role: Not Implemented (Assumed constant or to be added)"));
}
```

#### **Note on Role Display**:
- The `Employee` class does not have a `role` attribute in the provided snippets. To display roles as per the business requirement, add a `role` field to `Employee.java` along with its getter, and then modify the print statement in `Main.java` to include `employee.getRole()`. 

**Example Addition to `Employee.java` for Role (Not Requested but Necessary for Full Requirement Fulfillment)**:
```java
private String role;

public Employee(int id, String name, String department, String role) {
    this.id = id;
    this.name = name;
    this.department = department;
    this.role = role;
}

public String getRole() {
    return role;
}
```